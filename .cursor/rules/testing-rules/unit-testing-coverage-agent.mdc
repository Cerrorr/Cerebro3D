---
description:
globs:
alwaysApply: false
---
# 单元测试覆盖率规范

## Critical Rules

- 项目整体测试覆盖率必须保持在85%以上
- 每个新增的函数、组件、模块必须包含对应的单元测试
- 使用Jest + React Testing Library进行React组件测试
- 使用@testing-library/jest-dom进行DOM断言增强
- Redux相关代码必须使用@reduxjs/toolkit测试工具
- 自定义Hook必须使用@testing-library/react-hooks测试
- 异步操作必须进行完整的测试覆盖
- 错误边界和错误处理逻辑必须有测试覆盖
- 业务逻辑函数的分支覆盖率必须达到90%以上
- CI/CD流程中必须包含测试覆盖率检查

## Examples

<example>
  // Good - React组件单元测试
  import { render, screen, fireEvent, waitFor } from '@testing-library/react';
  import { Provider } from 'react-redux';
  import { configureStore } from '@reduxjs/toolkit';
  import userEvent from '@testing-library/user-event';
  import '@testing-library/jest-dom';
  
  import UserManagementPanel from '../UserManagementPanel';
  import userSlice from '../../store/slices/userSlice';

  const mockStore = configureStore({
    reducer: {
      user: userSlice,
    },
    preloadedState: {
      user: {
        users: [
          { id: '1', name: 'John Doe', email: 'john@example.com', role: 'admin' },
          { id: '2', name: 'Jane Smith', email: 'jane@example.com', role: 'user' },
        ],
        loading: false,
        error: null,
      },
    },
  });

  const renderWithProvider = (component: React.ReactElement) => {
    return render(
      <Provider store={mockStore}>
        {component}
      </Provider>
    );
  };

  describe('UserManagementPanel', () => {
    beforeEach(() => {
      jest.clearAllMocks();
    });

    it('should render user list correctly', () => {
      renderWithProvider(<UserManagementPanel />);
      
      expect(screen.getByText('John Doe')).toBeInTheDocument();
      expect(screen.getByText('jane@example.com')).toBeInTheDocument();
      expect(screen.getByRole('table')).toBeInTheDocument();
    });

    it('should handle user creation form submission', async () => {
      const user = userEvent.setup();
      renderWithProvider(<UserManagementPanel />);

      // 填写表单
      await user.type(screen.getByLabelText(/用户名/i), 'New User');
      await user.type(screen.getByLabelText(/邮箱/i), 'newuser@example.com');
      await user.selectOptions(screen.getByLabelText(/角色/i), 'user');

      // 提交表单
      await user.click(screen.getByRole('button', { name: /创建用户/i }));

      await waitFor(() => {
        expect(screen.getByText(/用户创建成功/i)).toBeInTheDocument();
      });
    });

    it('should handle form validation errors', async () => {
      const user = userEvent.setup();
      renderWithProvider(<UserManagementPanel />);

      // 尝试提交空表单
      await user.click(screen.getByRole('button', { name: /创建用户/i }));

      expect(screen.getByText(/请输入用户名/i)).toBeInTheDocument();
      expect(screen.getByText(/请输入邮箱/i)).toBeInTheDocument();
    });

    it('should handle API errors gracefully', async () => {
      // Mock API失败
      jest.spyOn(global, 'fetch').mockRejectedValueOnce(
        new Error('API Error')
      );

      renderWithProvider(<UserManagementPanel />);
      
      await waitFor(() => {
        expect(screen.getByText(/创建失败，请重试/i)).toBeInTheDocument();
      });
    });
  });

  // Good - Redux slice测试
  import userSlice, { fetchUsers, setCurrentUser } from '../userSlice';

  describe('userSlice', () => {
    const initialState = {
      currentUser: null,
      users: [],
      loading: false,
      error: null,
    };

    it('should handle setCurrentUser action', () => {
      const user = { id: '1', name: 'John', email: 'john@example.com', role: 'admin' };
      const action = setCurrentUser(user);
      const state = userSlice.reducer(initialState, action);
      
      expect(state.currentUser).toEqual(user);
    });

    it('should handle fetchUsers.pending', () => {
      const action = { type: fetchUsers.pending.type };
      const state = userSlice.reducer(initialState, action);
      
      expect(state.loading).toBe(true);
      expect(state.error).toBe(null);
    });

    it('should handle fetchUsers.fulfilled', () => {
      const users = [{ id: '1', name: 'John', email: 'john@example.com', role: 'admin' }];
      const action = { type: fetchUsers.fulfilled.type, payload: users };
      const state = userSlice.reducer(initialState, action);
      
      expect(state.loading).toBe(false);
      expect(state.users).toEqual(users);
    });

    it('should handle fetchUsers.rejected', () => {
      const action = { type: fetchUsers.rejected.type, payload: 'Error message' };
      const state = userSlice.reducer(initialState, action);
      
      expect(state.loading).toBe(false);
      expect(state.error).toBe('Error message');
    });
  });

  // Good - 自定义Hook测试
  import { renderHook, act } from '@testing-library/react';
  import { useR3FRotation } from '../hooks/useR3FRotation';

  describe('useR3FRotation', () => {
    it('should initialize with default values', () => {
      const { result } = renderHook(() => useR3FRotation());
      
      expect(result.current.isRotating).toBe(true);
      expect(result.current.meshRef.current).toBe(null);
      expect(typeof result.current.toggleRotation).toBe('function');
    });

    it('should toggle rotation state', () => {
      const { result } = renderHook(() => useR3FRotation());
      
      act(() => {
        result.current.toggleRotation();
      });
      
      expect(result.current.isRotating).toBe(false);
      
      act(() => {
        result.current.toggleRotation();
      });
      
      expect(result.current.isRotating).toBe(true);
    });

    it('should accept custom options', () => {
      const { result } = renderHook(() => 
        useR3FRotation({ autoStart: false, speed: 2 })
      );
      
      expect(result.current.isRotating).toBe(false);
    });
  });

  // Good - 业务逻辑函数测试
  import { validateUserData, calculateAge } from '../utils/userUtils';

  describe('userUtils', () => {
    describe('validateUserData', () => {
      it('should return true for valid user data', () => {
        const validUser = {
          name: 'John Doe',
          email: 'john@example.com',
          age: 25,
        };
        
        expect(validateUserData(validUser)).toBe(true);
      });

      it('should return false for invalid email', () => {
        const invalidUser = {
          name: 'John Doe',
          email: 'invalid-email',
          age: 25,
        };
        
        expect(validateUserData(invalidUser)).toBe(false);
      });

      it('should return false for underage user', () => {
        const underageUser = {
          name: 'John Doe',
          email: 'john@example.com',
          age: 15,
        };
        
        expect(validateUserData(underageUser)).toBe(false);
      });

      it('should handle edge cases', () => {
        expect(validateUserData(null)).toBe(false);
        expect(validateUserData(undefined)).toBe(false);
        expect(validateUserData({})).toBe(false);
      });
    });

    describe('calculateAge', () => {
      it('should calculate age correctly', () => {
        const birthDate = new Date('1990-01-01');
        const currentDate = new Date('2023-01-01');
        
        expect(calculateAge(birthDate, currentDate)).toBe(33);
      });

      it('should handle birthday not yet occurred this year', () => {
        const birthDate = new Date('1990-12-31');
        const currentDate = new Date('2023-06-01');
        
        expect(calculateAge(birthDate, currentDate)).toBe(32);
      });
    });
  });

  // Good - Jest配置文件 (jest.config.js)
  module.exports = {
    testEnvironment: 'jsdom',
    setupFilesAfterEnv: ['<rootDir>/src/setupTests.ts'],
    moduleNameMapping: {
      '^@/(.*)$': '<rootDir>/src/$1',
    },
    collectCoverageFrom: [
      'src/**/*.{ts,tsx}',
      '!src/**/*.d.ts',
      '!src/index.tsx',
      '!src/reportWebVitals.ts',
    ],
    coverageThreshold: {
      global: {
        branches: 85,
        functions: 85,
        lines: 85,
        statements: 85,
      },
    },
    coverageReporters: ['text', 'lcov', 'html'],
  };
</example>

<example type="invalid">
  // Bad - 没有测试覆盖的组件
  const UserComponent: React.FC = ({ user }) => {
    const [loading, setLoading] = useState(false);
    
    const handleDelete = async () => {
      setLoading(true);
      try {
        await deleteUser(user.id);
        showMessage('删除成功');
      } catch (error) {
        showMessage('删除失败');
      } finally {
        setLoading(false);
      }
    };

    return (
      <div>
        <span>{user.name}</span>
        <button onClick={handleDelete} disabled={loading}>
          删除
        </button>
      </div>
    );
  };
  // 这个组件没有对应的测试文件

  // Bad - 测试覆盖不完整
  describe('UserComponent', () => {
    it('should render user name', () => {
      render(<UserComponent user={{ id: '1', name: 'John' }} />);
      expect(screen.getByText('John')).toBeInTheDocument();
    });
    // 缺少删除功能、错误处理、加载状态的测试
  });

  // Bad - 没有Mock外部依赖
  describe('UserService', () => {
    it('should fetch users', async () => {
      // 直接调用真实的API，而不是Mock
      const users = await fetchUsers();
      expect(users.length).toBeGreaterThan(0);
    });
  });

  // Bad - 测试用例不够具体
  describe('Calculator', () => {
    it('should work', () => {
      const result = add(1, 2);
      expect(result).toBeDefined(); // 断言太模糊
    });
  });

  // Bad - 没有测试错误情况
  describe('UserValidator', () => {
    it('should validate correct email', () => {
      expect(validateEmail('test@example.com')).toBe(true);
    });
    // 没有测试无效邮箱、null值、undefined等错误情况
  });

  // Bad - 异步测试没有正确处理
  describe('AsyncFunction', () => {
    it('should handle async operation', () => {
      fetchData().then(data => {
        expect(data).toBeDefined(); // 没有return Promise或使用async/await
      });
    });
  });

  // Bad - 测试之间有依赖关系
  describe('StatefulComponent', () => {
    let component;
    
    it('should initialize', () => {
      component = render(<Component />);
      // 设置全局状态
    });
    
    it('should update', () => {
      // 依赖上一个测试的状态
      fireEvent.click(component.getByText('Update'));
    });
  });
</example>
