---
description:
globs:
alwaysApply: false
---
# 箭头函数优先规范

## Critical Rules

- 优先使用箭头函数而不是传统function声明，除非需要函数提升(hoisting)
- 对于单行表达式，省略大括号和return关键字
- 对于单个参数，可以省略圆括号（除非使用TypeScript类型注解）
- 在对象方法中使用箭头函数时要注意this绑定
- 避免在需要arguments对象的场景使用箭头函数
- 回调函数和高阶函数参数优先使用箭头函数
- React组件事件处理器优先使用箭头函数

## Examples

<example>
  // Good - 箭头函数优先
  const add = (a: number, b: number): number => a + b;
  
  // Good - 多行箭头函数
  const processUser = (user: User): ProcessedUser => {
    const normalized = normalizeUser(user);
    return applyDefaults(normalized);
  };
  
  // Good - 数组方法中使用箭头函数
  const activeUsers = users.filter(user => user.isActive);
  const userNames = users.map(user => user.name);
  
  // Good - React事件处理
  const handleClick = (event: MouseEvent) => {
    event.preventDefault();
    onSubmit();
  };
  
  // Good - 异步箭头函数
  const fetchData = async (id: string): Promise<Data> => {
    const response = await api.get(`/data/${id}`);
    return response.data;
  };
</example>

<example type="invalid">
  // Bad - 使用传统function（除非需要hoisting）
  function add(a: number, b: number): number {
    return a + b;
  }
  
  // Bad - 不必要的大括号和return
  const double = (x: number) => {
    return x * 2;
  };
  
  // Bad - 箭头函数用于需要this绑定的方法
  class Component {
    name = 'MyComponent';
    
    getName = () => {
      return this.name; // 可能导致this绑定问题
    }
  }
  
  // Bad - 在需要arguments的场景使用箭头函数
  const variableArgs = () => {
    console.log(arguments); // arguments在箭头函数中不可用
  };
</example>
