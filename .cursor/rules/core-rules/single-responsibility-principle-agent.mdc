---
description:
globs:
alwaysApply: false
---
# 单一职责原则 (Single Responsibility Principle)

## Critical Rules

- 每个函数只应该做一件事，并且把这件事做好
- 每个模块/类只应该有一个引起它变化的原因
- 函数名称应该清晰表达其单一职责
- 如果用"和"来描述函数功能，通常意味着需要拆分
- 保持函数参数数量在3个以内，超过则考虑对象封装
- 函数长度控制在20行以内，超过则考虑拆分
- 避免深层嵌套，超过3层需要提取子函数
- 数据获取、处理、展示应该分离在不同函数中
- 副作用操作（IO、状态修改）应该与纯计算分离

## Examples

<example>
  // Good - 每个函数职责单一明确
  const validateUserEmail = (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const formatUserName = (firstName: string, lastName: string): string => {
    return `${firstName} ${lastName}`;
  };

  const createUserDisplayData = (user: User): UserDisplay => {
    return {
      id: user.id,
      fullName: formatUserName(user.firstName, user.lastName),
      isValidEmail: validateUserEmail(user.email)
    };
  };

  // Good - 数据获取与处理分离
  const fetchUserData = async (userId: string): Promise<UserData> => {
    const response = await api.get(`/users/${userId}`);
    return response.data;
  };

  const processUserData = (userData: UserData): ProcessedUser => {
    return {
      ...userData,
      fullName: formatUserName(userData.firstName, userData.lastName),
      avatar: userData.avatar || DEFAULT_AVATAR
    };
  };

  // Good - 模块职责单一
  // userValidator.ts - 只负责验证
  export const UserValidator = {
    validateEmail: (email: string) => { /* ... */ },
    validateAge: (age: number) => { /* ... */ }
  };

  // userFormatter.ts - 只负责格式化
  export const UserFormatter = {
    formatName: (user: User) => { /* ... */ },
    formatAddress: (address: Address) => { /* ... */ }
  };
</example>

<example type="invalid">
  // Bad - 函数做了太多事情
  const processUserAndSaveToDatabase = async (userData: any) => {
    // 验证数据
    if (!userData.email || !userData.name) {
      throw new Error('Invalid data');
    }
    
    // 格式化数据
    const formattedName = userData.name.trim().toLowerCase();
    const formattedEmail = userData.email.toLowerCase();
    
    // 计算年龄
    const age = new Date().getFullYear() - new Date(userData.birthDate).getFullYear();
    
    // 保存到数据库
    await database.save({
      name: formattedName,
      email: formattedEmail,
      age: age
    });
    
    // 发送邮件通知
    await emailService.send(formattedEmail, 'Welcome!');
    
    // 记录日志
    logger.info(`User ${formattedName} created`);
  };

  // Bad - 函数参数过多，职责不清
  const updateUserProfile = (
    userId: string,
    name: string,
    email: string,
    phone: string,
    address: string,
    preferences: object,
    notifications: boolean
  ) => {
    // 做太多不同的事情...
  };

  // Bad - 深层嵌套，多重职责
  const complexUserOperation = (users: User[]) => {
    for (const user of users) {
      if (user.isActive) {
        if (user.hasSubscription) {
          if (user.paymentStatus === 'current') {
            // 处理付费用户逻辑
            for (const feature of user.features) {
              if (feature.isEnabled) {
                // 嵌套太深，职责混乱
              }
            }
          }
        }
      }
    }
  };
</example>
