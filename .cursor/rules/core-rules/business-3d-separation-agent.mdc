---
description:
globs:
alwaysApply: false
---
# 业务逻辑与三维代码分离规范

## Critical Rules

- 业务逻辑组件不应直接包含React Three Fiber相关代码
- 3D组件只负责渲染和视觉交互，不处理业务逻辑
- 使用Props和回调函数在业务层和3D层之间传递数据
- 3D组件应该是纯展示组件，接收数据并渲染
- 业务状态管理与3D场景状态分别管理
- API调用、数据处理等业务逻辑必须在业务层完成
- 3D交互事件通过回调函数传递给业务层处理
- 避免在Canvas内部直接调用业务API或修改业务状态
- 使用容器组件模式分离业务逻辑和3D展示
- 复杂的业务规则不应出现在3D Hook中

## Examples

<example>
  // Good - 业务逻辑与3D分离的架构
  
  // 业务层 - UserManagementContainer.tsx
  interface User {
    id: string;
    name: string;
    position: Vector3;
    isActive: boolean;
  }

  const UserManagementContainer: React.FC = () => {
    const [users, setUsers] = useState<User[]>([]);
    const [selectedUserId, setSelectedUserId] = useState<string | null>(null);

    // 业务逻辑：获取用户数据
    const fetchUsers = useCallback(async () => {
      const response = await userAPI.getUsers();
      setUsers(response.data);
    }, []);

    // 业务逻辑：处理用户选择
    const handleUserSelect = useCallback((userId: string) => {
      setSelectedUserId(userId);
      // 业务规则：记录用户交互
      analyticsService.trackUserInteraction(userId);
    }, []);

    // 业务逻辑：更新用户状态
    const handleUserStatusChange = useCallback(async (userId: string, isActive: boolean) => {
      await userAPI.updateUserStatus(userId, isActive);
      setUsers(prev => prev.map(user => 
        user.id === userId ? { ...user, isActive } : user
      ));
    }, []);

    return (
      <div className="flex h-screen">
        <UserControlPanel 
          users={users}
          selectedUserId={selectedUserId}
          onUserStatusChange={handleUserStatusChange}
        />
        <User3DVisualization
          users={users}
          selectedUserId={selectedUserId}
          onUserSelect={handleUserSelect}
        />
      </div>
    );
  };

  // 3D层 - User3DVisualization.tsx
  interface User3DVisualizationProps {
    users: User[];
    selectedUserId: string | null;
    onUserSelect: (userId: string) => void;
  }

  const User3DVisualization: React.FC<User3DVisualizationProps> = ({
    users,
    selectedUserId,
    onUserSelect
  }) => {
    return (
      <Canvas camera={{ position: [0, 5, 10] }}>
        <ambientLight intensity={0.5} />
        <pointLight position={[10, 10, 10]} />
        
        {users.map(user => (
          <UserAvatar3D
            key={user.id}
            user={user}
            isSelected={user.id === selectedUserId}
            onClick={() => onUserSelect(user.id)}
          />
        ))}
        
        <OrbitControls />
      </Canvas>
    );
  };

  // 3D组件 - UserAvatar3D.tsx
  interface UserAvatar3DProps {
    user: User;
    isSelected: boolean;
    onClick: () => void;
  }

  const UserAvatar3D: React.FC<UserAvatar3DProps> = ({ user, isSelected, onClick }) => {
    const { meshRef } = useR3FRotation({ 
      speed: isSelected ? 2 : 0.5 
    });

    return (
      <mesh
        ref={meshRef}
        position={user.position}
        onClick={onClick}
        scale={isSelected ? 1.2 : 1.0}
      >
        <sphereGeometry args={[0.5, 32, 32]} />
        <meshStandardMaterial 
          color={user.isActive ? 'green' : 'red'}
          emissive={isSelected ? 'blue' : 'black'}
        />
      </mesh>
    );
  };

  // Good - 数据转换层
  const useBusinessToVisualizationData = (businessData: BusinessUser[]) => {
    return useMemo(() => 
      businessData.map(user => ({
        id: user.id,
        position: new Vector3(user.coordinates.x, 0, user.coordinates.z),
        color: user.department.color,
        scale: user.importance
      })), [businessData]
    );
  };
</example>

<example type="invalid">
  // Bad - 业务逻辑与3D代码混合
  const MixedUserComponent: React.FC = () => {
    const [users, setUsers] = useState<User[]>([]);
    
    return (
      <Canvas>
        <mesh onClick={async () => {
          // Bad: 3D组件内直接处理业务逻辑
          const response = await fetch('/api/users');
          const newUsers = await response.json();
          setUsers(newUsers);
          
          // Bad: 3D组件内直接调用业务API
          await analyticsService.trackClick();
        }}>
          <boxGeometry />
        </mesh>
      </Canvas>
    );
  };

  // Bad - 在3D Hook中包含业务逻辑
  const useUserManagement3D = () => {
    const [users, setUsers] = useState([]);
    const meshRef = useRef<THREE.Mesh>(null);

    // Bad: 3D Hook处理业务数据
    useEffect(() => {
      fetch('/api/users')
        .then(res => res.json())
        .then(setUsers);
    }, []);

    useFrame(() => {
      // Bad: 渲染循环中混合业务逻辑
      if (users.length > 10) {
        // 业务规则混在3D逻辑中
        console.log('Too many users');
      }
      
      if (meshRef.current) {
        meshRef.current.rotation.y += 0.01;
      }
    });

    return { meshRef, users };
  };

  // Bad - Canvas内部直接包含业务逻辑
  const BadSceneComponent: React.FC = () => {
    return (
      <Canvas>
        <mesh onClick={() => {
          // Bad: 3D场景内直接处理业务
          window.location.href = '/dashboard';
          localStorage.setItem('lastClicked', Date.now().toString());
        }}>
          <sphereGeometry />
        </mesh>
        
        {/* Bad: 在3D场景中直接获取业务数据 */}
        <BusinessDataFetcher onData={(data) => {
          // 业务数据处理混在3D场景中
        }} />
      </Canvas>
    );
  };

  // Bad - 3D组件直接修改全局业务状态
  const Bad3DComponent: React.FC = () => {
    const { updateUserPreferences } = useBusinessStore();
    
    return (
      <mesh onClick={() => {
        // Bad: 3D组件直接修改业务状态
        updateUserPreferences({ theme: 'dark' });
      }}>
        <boxGeometry />
      </mesh>
    );
  };
</example>
