---
description:
globs:
alwaysApply: false
---
# React组件拆分规范 🧩

## Critical Rules

- **单一职责原则**: 每个组件只负责一个明确的功能或UI部分
- **组件大小限制**: 单个组件文件不超过200行代码（不包括类型定义和样式）
- **Props数量控制**: 组件Props不超过8个，超过时考虑使用配置对象或拆分组件
- **嵌套层级限制**: JSX嵌套层级不超过5层，超过时必须拆分子组件
- **可测试性要求**: 每个拆分出的组件都应该可以独立测试
- **命名规范**: 拆分的组件使用描述性名称，体现其具体功能
- **文件组织**: 相关的拆分组件放在同一目录下，使用index.ts导出
- **状态管理**: 拆分时合理分配状态，避免过度的props drilling

## 拆分判断标准

### 🔴 必须拆分的情况
- 组件代码超过200行
- JSX结构嵌套超过5层
- 组件包含多个不相关的功能
- 有重复的UI模式出现
- Props参数超过8个
- 组件内部有复杂的条件渲染逻辑

### 🟡 建议拆分的情况  
- 组件代码超过100行
- 有明显可复用的UI片段
- 组件承担了多个职责
- 测试覆盖变得困难
- 团队成员难以理解组件结构

### 🟢 可以不拆分的情况
- 组件功能高度内聚且简单
- 拆分后会增加不必要的复杂性
- 组件不会被复用
- 代码少于50行且逻辑清晰

## 拆分策略

### 1. 按功能拆分
```typescript
// 原始组件
const UserProfile = () => {
  // 用户信息展示 + 编辑功能 + 头像上传
}

// 拆分后
const UserInfo = () => { /* 用户信息展示 */ }
const UserEditor = () => { /* 编辑功能 */ }
const AvatarUpload = () => { /* 头像上传 */ }
```

### 2. 按UI区域拆分
```typescript
// 原始组件
const Dashboard = () => {
  // 头部 + 侧边栏 + 主内容 + 底部
}

// 拆分后
const DashboardHeader = () => { /* 头部 */ }
const DashboardSidebar = () => { /* 侧边栏 */ }
const DashboardContent = () => { /* 主内容 */ }
const DashboardFooter = () => { /* 底部 */ }
```

### 3. 按数据层拆分
```typescript
// 容器组件负责数据
const UserListContainer = () => {
  const [users, setUsers] = useState([])
  return <UserList users={users} />
}

// 展示组件负责UI
const UserList = ({ users }) => {
  return users.map(user => <UserItem key={user.id} user={user} />)
}
```

## 文件组织规范

```
components/
  UserProfile/
    index.ts              // 导出主组件
    UserProfile.tsx       // 主组件
    UserInfo.tsx         // 子组件
    UserEditor.tsx       // 子组件
    AvatarUpload.tsx     // 子组件
    types.ts             // 类型定义
    styles.module.css    // 样式文件
    __tests__/           // 测试文件
      UserProfile.test.tsx
      UserInfo.test.tsx
```

## Examples

<example>
  ```typescript
  // ✅ 正确的组件拆分
  const OrderForm = () => {
    return (
      <form>
        <CustomerInfo />
        <ProductSelector />
        <PaymentMethod />
        <OrderSummary />
      </form>
    )
  }
  
  // 每个子组件职责明确
  const CustomerInfo = () => {
    // 只处理客户信息相关逻辑
  }
  
  const ProductSelector = () => {
    // 只处理产品选择逻辑
  }
  ```
</example>

<example type="invalid">
  ```typescript
  // ❌ 错误的组件结构
  const OrderForm = () => {
    return (
      <form>
        <div>
          <input /> {/* 客户姓名 */}
          <input /> {/* 客户邮箱 */}
          <select> {/* 产品选择 */}
            <option>...</option>
          </select>
          <div> {/* 支付方式 */}
            <input type="radio" />
            <input type="radio" />
          </div>
          <div> {/* 订单汇总 */}
            <span>总价: {total}</span>
            <span>税费: {tax}</span>
          </div>
        </div>
      </form>
    )
  }
  // 所有逻辑混在一个组件中，难以维护和测试
  ```
</example>
