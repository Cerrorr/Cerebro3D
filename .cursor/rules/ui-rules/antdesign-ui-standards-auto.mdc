---
description:
globs:
alwaysApply: false
---
# Ant Design UI 组件库规范

## Critical Rules

- 项目必须使用Ant Design作为主要UI组件库
- 所有业务界面组件优先使用Ant Design提供的组件
- 保持Ant Design的设计语言和视觉风格一致性
- 自定义组件必须与Ant Design风格保持统一
- 使用Ant Design的主题配置系统进行全局样式定制
- Form表单必须使用Ant Design的Form组件和验证系统
- 表格数据展示必须使用Ant Design的Table组件
- 弹窗和通知必须使用Ant Design的Modal、Message、Notification
- 图标优先使用Ant Design Icons，保持图标风格统一
- 响应式布局使用Ant Design的Grid系统

## Examples

<example>
  // Good - 使用Ant Design组件构建业务界面
  import React from 'react';
  import {
    Layout,
    Menu,
    Button,
    Table,
    Form,
    Input,
    Select,
    Space,
    Card,
    Typography,
    Divider,
    message
  } from 'antd';
  import {
    UserOutlined,
    SettingOutlined,
    PlusOutlined,
    EditOutlined,
    DeleteOutlined
  } from '@ant-design/icons';

  const { Header, Sider, Content } = Layout;
  const { Title, Text } = Typography;
  const { Option } = Select;

  interface User {
    id: string;
    name: string;
    email: string;
    role: string;
    status: 'active' | 'inactive';
  }

  const UserManagementPanel: React.FC = () => {
    const [form] = Form.useForm();
    const [users, setUsers] = useState<User[]>([]);

    const columns = [
      {
        title: '姓名',
        dataIndex: 'name',
        key: 'name',
        render: (text: string) => <Text strong>{text}</Text>,
      },
      {
        title: '邮箱',
        dataIndex: 'email',
        key: 'email',
      },
      {
        title: '角色',
        dataIndex: 'role',
        key: 'role',
        render: (role: string) => (
          <Select value={role} style={{ width: 120 }}>
            <Option value="admin">管理员</Option>
            <Option value="user">用户</Option>
          </Select>
        ),
      },
      {
        title: '操作',
        key: 'action',
        render: (_, record: User) => (
          <Space size="middle">
            <Button type="link" icon={<EditOutlined />}>
              编辑
            </Button>
            <Button type="link" danger icon={<DeleteOutlined />}>
              删除
            </Button>
          </Space>
        ),
      },
    ];

    const handleSubmit = async (values: any) => {
      try {
        await createUser(values);
        message.success('用户创建成功');
        form.resetFields();
      } catch (error) {
        message.error('创建失败，请重试');
      }
    };

    return (
      <Layout style={{ minHeight: '100vh' }}>
        <Sider theme="light" width={250}>
          <Menu mode="inline" defaultSelectedKeys={['users']}>
            <Menu.Item key="users" icon={<UserOutlined />}>
              用户管理
            </Menu.Item>
            <Menu.Item key="settings" icon={<SettingOutlined />}>
              系统设置
            </Menu.Item>
          </Menu>
        </Sider>
        
        <Layout>
          <Header className="bg-white px-6 shadow-sm">
            <Title level={2} className="mb-0">
              用户管理系统
            </Title>
          </Header>
          
          <Content className="p-6">
            <Card 
              title="添加新用户" 
              extra={<Button type="primary" icon={<PlusOutlined />}>批量导入</Button>}
              className="mb-6"
            >
              <Form
                form={form}
                layout="horizontal"
                labelCol={{ span: 4 }}
                wrapperCol={{ span: 16 }}
                onFinish={handleSubmit}
              >
                <Form.Item
                  label="用户名"
                  name="name"
                  rules={[{ required: true, message: '请输入用户名' }]}
                >
                  <Input placeholder="请输入用户名" />
                </Form.Item>
                
                <Form.Item
                  label="邮箱"
                  name="email"
                  rules={[
                    { required: true, message: '请输入邮箱' },
                    { type: 'email', message: '请输入有效的邮箱地址' }
                  ]}
                >
                  <Input placeholder="请输入邮箱" />
                </Form.Item>
                
                <Form.Item
                  label="角色"
                  name="role"
                  rules={[{ required: true, message: '请选择角色' }]}
                >
                  <Select placeholder="请选择角色">
                    <Option value="admin">管理员</Option>
                    <Option value="user">普通用户</Option>
                  </Select>
                </Form.Item>
                
                <Form.Item wrapperCol={{ offset: 4, span: 16 }}>
                  <Space>
                    <Button type="primary" htmlType="submit">
                      创建用户
                    </Button>
                    <Button onClick={() => form.resetFields()}>
                      重置
                    </Button>
                  </Space>
                </Form.Item>
              </Form>
            </Card>

            <Divider />

            <Card title="用户列表">
              <Table
                columns={columns}
                dataSource={users}
                rowKey="id"
                pagination={{
                  total: users.length,
                  pageSize: 10,
                  showSizeChanger: true,
                  showQuickJumper: true,
                  showTotal: (total) => `共 ${total} 条记录`,
                }}
              />
            </Card>
          </Content>
        </Layout>
      </Layout>
    );
  };

  // Good - 使用Ant Design主题配置
  import { ConfigProvider, theme } from 'antd';
  import zhCN from 'antd/locale/zh_CN';

  const AppWithTheme: React.FC = () => {
    return (
      <ConfigProvider
        locale={zhCN}
        theme={{
          algorithm: theme.defaultAlgorithm,
          token: {
            colorPrimary: '#1890ff',
            borderRadius: 6,
            fontSize: 14,
          },
          components: {
            Button: {
              borderRadius: 6,
            },
            Input: {
              borderRadius: 6,
            },
          },
        }}
      >
        <App />
      </ConfigProvider>
    );
  };

  // Good - 自定义组件保持Ant Design风格
  import { Card, Typography } from 'antd';
  
  interface StatsCardProps {
    title: string;
    value: number;
    icon: React.ReactNode;
    trend?: 'up' | 'down';
  }

  const StatsCard: React.FC<StatsCardProps> = ({ title, value, icon, trend }) => {
    return (
      <Card className="hover:shadow-md transition-shadow">
        <div className="flex items-center justify-between">
          <div>
            <Typography.Text type="secondary" className="text-sm">
              {title}
            </Typography.Text>
            <Typography.Title level={2} className="mb-0">
              {value.toLocaleString()}
            </Typography.Title>
          </div>
          <div className="text-2xl text-gray-400">
            {icon}
          </div>
        </div>
      </Card>
    );
  };
</example>

<example type="invalid">
  // Bad - 混用其他UI库
  import { Button } from 'antd';
  import { Button as MuiButton } from '@mui/material'; // 不应混用
  import { Button as ChakraButton } from '@chakra-ui/react'; // 不应混用

  const MixedUIComponent = () => {
    return (
      <div>
        <Button type="primary">Ant Design Button</Button>
        <MuiButton variant="contained">Material UI Button</MuiButton>
        <ChakraButton colorScheme="blue">Chakra Button</ChakraButton>
      </div>
    );
  };

  // Bad - 不使用Ant Design的Form系统
  const BadForm: React.FC = () => {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');

    return (
      <form>
        {/* 应该使用Ant Design的Form组件 */}
        <input 
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Name"
        />
        <input 
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Email"
        />
        <button type="submit">Submit</button>
      </form>
    );
  };

  // Bad - 自定义样式破坏Ant Design风格
  const BadStyledComponent: React.FC = () => {
    return (
      <Button 
        type="primary"
        style={{
          borderRadius: '20px', // 破坏一致性
          background: 'linear-gradient(45deg, #ff6b6b, #4ecdc4)', // 自定义背景
          border: 'none',
          fontSize: '18px', // 不符合设计规范
          fontFamily: 'Comic Sans MS', // 不合适的字体
        }}
      >
        不合规的按钮
      </Button>
    );
  };

  // Bad - 不使用Ant Design的图标系统
  import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'; // 不应使用
  import { Icon } from 'react-feather'; // 不应使用

  const BadIconUsage: React.FC = () => {
    return (
      <div>
        <FontAwesomeIcon icon="user" />
        <Icon name="settings" />
        {/* 应该使用 @ant-design/icons */}
      </div>
    );
  };

  // Bad - 不使用Ant Design的布局系统
  const BadLayout: React.FC = () => {
    return (
      <div className="custom-layout"> {/* 应该使用Layout组件 */}
        <div className="custom-sidebar"> {/* 应该使用Sider */}
          <nav className="custom-nav"> {/* 应该使用Menu */}
            <a href="/users">Users</a>
            <a href="/settings">Settings</a>
          </nav>
        </div>
        <div className="custom-content"> {/* 应该使用Content */}
          {/* content */}
        </div>
      </div>
    );
  };

  // Bad - 不使用Ant Design的消息提示
  const BadNotification: React.FC = () => {
    const showAlert = () => {
      alert('操作成功'); // 应该使用message.success()
      window.confirm('确认删除？'); // 应该使用Modal.confirm()
    };

    return <Button onClick={showAlert}>显示提示</Button>;
  };
</example>
