---
description:
globs:
alwaysApply: false
---
---
description: 定义业务代码中SCSS文件的就近统一管理规范，确保每个组件都有对应的SCSS文件并在组件目录下的styles文件夹中统一管理，保持一对一的对应关系。适用于所有React组件、页面组件和业务模块的样式文件组织。
globs: 
alwaysApply: false
---

# SCSS文件就近统一管理规范

## Critical Rules

- **一对一对应关系**：每个React组件(.tsx)必须有对应的SCSS文件(.scss)，文件名保持一致
- **就近管理原则**：SCSS文件必须放在对应组件目录下的`styles`文件夹中
- **统一命名规范**：组件文件`ComponentName.tsx`对应样式文件`styles/ComponentName.scss`
- **文件夹级管理**：每个组件文件夹内创建`styles`子文件夹，统一管理所有样式文件
- **导入路径规范**：组件内导入样式使用相对路径`./styles/ComponentName.scss`
- **禁止全局样式**：业务组件不允许直接修改全局样式，必须使用组件级样式
- **继承层级管理**：子组件可以继承父组件样式变量，但必须通过SCSS @use导入
- **样式作用域**：每个SCSS文件的顶级类名必须与组件名称对应，确保样式隔离

## 目录结构规范

```
src/
├── components/
│   ├── ComponentA/
│   │   ├── ComponentA.tsx      ✅ 组件文件
│   │   ├── SubComponent.tsx    ✅ 子组件
│   │   ├── styles/             ✅ 样式文件夹
│   │   │   ├── ComponentA.scss ✅ 主组件样式
│   │   │   └── SubComponent.scss ✅ 子组件样式
│   │   └── index.ts           ✅ 导出文件
│   └── ComponentB/
│       ├── ComponentB.tsx
│       ├── styles/
│       │   └── ComponentB.scss
│       └── index.ts
├── pages/
│   ├── HomePage/
│   │   ├── HomePage.tsx
│   │   ├── styles/             ✅ 页面样式文件夹
│   │   │   └── HomePage.scss   ✅ 页面样式
│   │   └── components/         ✅ 页面专用组件
│   │       ├── PageHeader.tsx
│   │       └── styles/
│   │           └── PageHeader.scss
└── styles/                     ✅ 全局样式和工具
    ├── globals.scss
    ├── variables.scss
    └── mixins.scss
```

## Examples

<example>
  正确的组件和样式组织：
  
  ```typescript
  // src/components/UserCard/UserCard.tsx
  import React from 'react';
  import './styles/UserCard.scss';  // ✅ 从styles文件夹导入
  
  const UserCard: React.FC = () => {
    return (
      <div className="user-card">  {/* ✅ 与组件名对应 */}
        <div className="user-avatar">...</div>
      </div>
    );
  };
  ```
  
  ```scss
  // src/components/UserCard/styles/UserCard.scss
  @use '../../../styles/variables' as vars;
  
  .user-card {  // ✅ 顶级类名与组件名对应
    @apply bg-white rounded-lg shadow-md;
    
    .user-avatar {  // ✅ 嵌套样式
      @apply w-12 h-12 rounded-full;
    }
  }
  ```
  
  文件结构：
  ```
  src/components/UserCard/
  ├── UserCard.tsx         ✅ 组件文件
  ├── UserProfile.tsx      ✅ 子组件
  ├── styles/              ✅ 样式文件夹
  │   ├── UserCard.scss    ✅ 主组件样式
  │   └── UserProfile.scss ✅ 子组件样式
  └── index.ts            ✅ 统一导出
  ```
</example>

<example type="invalid">
  错误的样式组织方式：
  
  ```typescript
  // ❌ 错误：样式文件不在组件的styles文件夹中
  import '../../styles/components/UserCard.scss';
  
  // ❌ 错误：样式文件直接放在组件目录下
  import './UserCard.scss';
  
  // ❌ 错误：没有对应的SCSS文件，直接使用Tailwind
  const UserCard = () => (
    <div className="bg-white rounded-lg shadow-md">
  ```
  
  ```scss
  // ❌ 错误：样式文件放在全局styles目录
  // src/styles/components/UserCard.scss
  
  // ❌ 错误：顶级类名与组件名不对应
  .card-container {
    .user-info { ... }
  }
  ```
  
  错误的文件结构：
  ```
  src/components/UserCard/
  ├── UserCard.tsx          ❌ 有组件文件
  ├── UserCard.scss         ❌ 样式文件应该在styles文件夹中
  └── index.ts
  
  src/styles/components/
  └── UserCard.scss         ❌ 样式文件不应放在全局目录
  ```
</example>

## 迁移指南

### 现有项目重构步骤：
1. 识别所有没有对应SCSS文件的组件
2. 为每个组件创建同名SCSS文件
3. 将分散的样式文件移动到对应组件目录
4. 更新导入路径为相对路径
5. 确保顶级类名与组件名匹配
6. 使用@use导入全局变量和mixins

### 检查清单：
- [ ] 每个.tsx文件都有对应的.scss文件
- [ ] 样式文件放在组件目录下的styles文件夹中
- [ ] 组件内使用相对路径`./styles/ComponentName.scss`导入样式
- [ ] 顶级CSS类名与组件名对应
- [ ] 没有修改全局样式的业务代码
- [ ] 所有组件都有独立的styles文件夹
