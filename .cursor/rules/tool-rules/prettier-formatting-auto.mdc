---
description:
globs:
alwaysApply: false
---
---
description: 
globs: *.ts, *.tsx, *.js, *.jsx, *.json, *.md
alwaysApply: false
---

# Prettier 代码格式化规范

## Critical Rules

- 项目必须使用Prettier进行统一的代码格式化
- 必须配置.prettierrc配置文件并保持团队一致
- 所有代码提交前必须经过Prettier格式化
- 集成ESLint与Prettier，避免格式化冲突
- IDE必须配置Prettier自动格式化
- Git hooks必须包含Prettier格式化检查
- CI/CD流程必须验证代码格式化状态
- 不允许手动调整Prettier格式化后的代码
- 团队成员必须使用相同的Prettier配置
- 格式化规则优先级：Prettier > ESLint stylistic rules

## Examples

<example>
  // Good - .prettierrc 配置文件
  {
    "semi": true,
    "trailingComma": "es5",
    "singleQuote": true,
    "printWidth": 80,
    "tabWidth": 2,
    "useTabs": false,
    "bracketSpacing": true,
    "bracketSameLine": false,
    "arrowParens": "avoid",
    "endOfLine": "lf",
    "quoteProps": "as-needed",
    "jsxSingleQuote": false,
    "proseWrap": "preserve"
  }

  // Good - .prettierignore 文件
  # 构建输出
  /dist
  /build
  /.next
  
  # 依赖目录
  /node_modules
  
  # 自动生成文件
  *.min.js
  *.min.css
  /coverage
  
  # 配置文件
  package-lock.json
  yarn.lock
  
  # 文档
  CHANGELOG.md

  // Good - package.json 脚本配置
  {
    "scripts": {
      "format": "prettier --write .",
      "format:check": "prettier --check .",
      "format:staged": "prettier --write",
      "lint": "eslint . --ext .ts,.tsx,.js,.jsx",
      "lint:fix": "eslint . --ext .ts,.tsx,.js,.jsx --fix"
    },
    "devDependencies": {
      "prettier": "^3.0.0",
      "eslint-config-prettier": "^9.0.0",
      "eslint-plugin-prettier": "^5.0.0",
      "@typescript-eslint/eslint-plugin": "^6.0.0",
      "@typescript-eslint/parser": "^6.0.0"
    }
  }

  // Good - ESLint配置与Prettier集成 (.eslintrc.js)
  module.exports = {
    root: true,
    env: {
      browser: true,
      es2020: true,
      node: true,
    },
    extends: [
      'eslint:recommended',
      '@typescript-eslint/recommended',
      'plugin:react/recommended',
      'plugin:react-hooks/recommended',
      'prettier', // 必须放在最后，禁用与Prettier冲突的规则
    ],
    plugins: ['@typescript-eslint', 'react', 'prettier'],
    rules: {
      'prettier/prettier': 'error', // 将Prettier规则作为ESLint错误
      // 禁用与Prettier冲突的规则
      'indent': 'off',
      'linebreak-style': 'off',
      'quotes': 'off',
      'semi': 'off',
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  };

  // Good - VS Code设置 (.vscode/settings.json)
  {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.codeActionsOnSave": {
      "source.fixAll.eslint": true
    },
    "[typescript]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescriptreact]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[javascript]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[javascriptreact]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[json]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "prettier.requireConfig": true,
    "prettier.useEditorConfig": false
  }

  // Good - Git hooks配置 (husky + lint-staged)
  // package.json
  {
    "husky": {
      "hooks": {
        "pre-commit": "lint-staged"
      }
    },
    "lint-staged": {
      "*.{ts,tsx,js,jsx}": [
        "prettier --write",
        "eslint --fix",
        "git add"
      ],
      "*.{json,md,html,css}": [
        "prettier --write",
        "git add"
      ]
    }
  }

  // Good - GitHub Actions CI配置
  name: Code Quality
  on: [push, pull_request]
  
  jobs:
    format-check:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-node@v3
          with:
            node-version: '18'
            cache: 'npm'
        - run: npm ci
        - name: Check Prettier formatting
          run: npm run format:check
        - name: Check ESLint
          run: npm run lint

  // Good - 格式化后的代码示例
  import React, { useState, useCallback } from 'react';
  import { Button, Form, Input, message } from 'antd';
  import type { UserFormProps, UserFormData } from './UserForm.types';

  const UserForm: React.FC<UserFormProps> = ({
    user,
    onSubmit,
    onCancel,
    loading = false,
  }) => {
    const [form] = Form.useForm<UserFormData>();
    
    const handleSubmit = useCallback(
      async (values: UserFormData) => {
        try {
          await onSubmit(values);
          message.success('用户保存成功');
          form.resetFields();
        } catch (error) {
          message.error('保存失败，请重试');
        }
      },
      [onSubmit, form]
    );

    return (
      <Form
        form={form}
        layout="vertical"
        initialValues={user}
        onFinish={handleSubmit}
      >
        <Form.Item
          label="用户名"
          name="name"
          rules={[{ required: true, message: '请输入用户名' }]}
        >
          <Input placeholder="请输入用户名" />
        </Form.Item>
        
        <Form.Item>
          <Button
            type="primary"
            htmlType="submit"
            loading={loading}
            style={{ marginRight: 8 }}
          >
            保存
          </Button>
          <Button onClick={onCancel}>取消</Button>
        </Form.Item>
      </Form>
    );
  };

  export default UserForm;

  // Good - 复杂对象格式化
  const complexConfig = {
    api: {
      baseURL: 'https://api.example.com',
      timeout: 5000,
      retries: 3,
    },
    features: {
      userManagement: true,
      analytics: false,
      debugging: process.env.NODE_ENV === 'development',
    },
    themes: {
      primary: '#1890ff',
      secondary: '#722ed1',
      success: '#52c41a',
      warning: '#faad14',
      error: '#f5222d',
    },
  };

  // Good - 长函数参数格式化
  const createUserWithComplexData = async (
    userData: UserFormData,
    permissions: Permission[],
    organizationId: string,
    sendWelcomeEmail: boolean = true,
    additionalMetadata?: Record<string, any>
  ): Promise<User> => {
    // 函数实现
  };
</example>

<example type="invalid">
  // Bad - 没有Prettier配置
  // 项目中没有.prettierrc文件，团队成员使用不同的格式化设置

  // Bad - 不一致的格式化
  import React, {useState,useCallback} from 'react'; // 缺少空格
  import {Button,Form,Input,message} from 'antd'; // 缺少空格

  const UserForm: React.FC<UserFormProps> = ({ user, onSubmit, onCancel, loading=false }) => { // 格式不一致
      const [form] = Form.useForm<UserFormData>(); // 缩进错误
    
    const handleSubmit = useCallback(async (values: UserFormData) => { // 换行不规范
  try {
    await onSubmit(values);
    message.success("用户保存成功"); // 引号不一致
  } catch(error) { // 缺少空格
    message.error('保存失败，请重试')
  } // 缺少分号
    }, [onSubmit,form]); // 缺少空格

    return (<Form form={form} layout="vertical" initialValues={user} onFinish={handleSubmit}> // 格式混乱
      <Form.Item label="用户名" name="name" rules={[{required: true, message: '请输入用户名'}]}> // 缺少空格
        <Input placeholder="请输入用户名"/></Form.Item> // 格式不规范
      <Form.Item><Button type="primary" htmlType="submit" loading={loading} style={{marginRight: 8}}>保存</Button> // 对象格式错误
      <Button onClick={onCancel}>取消</Button></Form.Item></Form>); // 换行错误
  };

  // Bad - ESLint与Prettier冲突
  // .eslintrc.js
  module.exports = {
    rules: {
      'indent': ['error', 4], // 与Prettier的2空格冲突
      'quotes': ['error', 'double'], // 与Prettier的单引号冲突
      'semi': ['error', 'never'], // 与Prettier的分号要求冲突
    }
  };

  // Bad - 忽略Prettier格式化
  // 手动调整Prettier格式化后的代码
  const config = {
    api:       { baseURL: 'https://api.example.com' }, // 手动对齐
    features:  { userManagement: true },               // 手动对齐
    themes:    { primary: '#1890ff' }                  // 手动对齐
  };

  // Bad - 没有Git hooks
  // 提交未格式化的代码到仓库

  // Bad - IDE配置错误
  // VS Code设置中使用了其他格式化工具
  {
    "editor.defaultFormatter": "vscode.typescript-language-features" // 应该是prettier
  }

  // Bad - CI中没有格式化检查
  // GitHub Actions中缺少prettier检查步骤

  // Bad - 部分文件排除格式化
  // 随意在.prettierignore中排除不应该排除的文件
  *.ts
  *.tsx
  src/components/

  // Bad - 混用格式化工具
  // 在项目中同时使用Prettier和其他格式化工具

  // Bad - 不遵循团队配置
  // 个人修改.prettierrc配置而不与团队同步
</example>
