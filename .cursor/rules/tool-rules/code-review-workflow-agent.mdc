---
description:
globs:
alwaysApply: false
---
# Code Review 工作流程规范

## Critical Rules

- 所有代码必须通过Code Review后才能提交到主分支
- 至少需要1-2个团队成员的审查批准才能合并PR
- 不允许直接推送到main/master分支
- 必须使用Pull Request/Merge Request进行代码提交
- Review必须检查代码质量、功能实现、测试覆盖率
- CI/CD检查通过是合并的前置条件
- 大型功能必须拆分为小的可审查的PR
- 所有Review评论必须得到回应和解决
- 自己不能批准自己的PR
- 紧急修复也必须经过简化的Review流程

## Examples

<example>
  // Good - 标准的Pull Request工作流程
  
  // 1. 创建功能分支
  git checkout -b feature/user-management-panel
  
  // 2. 开发并提交代码
  git add .
  git commit -m "feat: add user management panel with CRUD operations
  
  - Implement user list display with Ant Design Table
  - Add user creation form with validation
  - Add edit and delete functionality
  - Include unit tests with 90% coverage
  - Follow Redux state management patterns
  
  Closes #123"
  
  // 3. 推送到远程分支
  git push origin feature/user-management-panel
  
  // 4. 创建Pull Request模板
  ## 🎯 变更概述
  添加用户管理面板，包含完整的CRUD功能
  
  ## 📋 变更清单
  - [x] 用户列表展示（使用Ant Design Table）
  - [x] 用户创建表单（包含验证）
  - [x] 编辑和删除功能
  - [x] Redux状态管理集成
  - [x] 单元测试（覆盖率90%+）
  - [x] TypeScript类型定义
  
  ## 🧪 测试
  - [x] 单元测试通过
  - [x] 集成测试通过
  - [x] E2E测试通过
  - [x] 手动测试验证
  
  ## 📸 截图/演示
  [包含功能演示截图或GIF]
  
  ## 🔍 Review重点
  - 用户数据验证逻辑
  - Redux状态更新流程
  - 错误处理机制
  - 组件可复用性
  
  ## 📝 其他说明
  - 遵循现有的代码规范
  - 保持业务逻辑与3D代码分离
  - 使用Ant Design组件保持UI一致性

  // Good - Code Review检查清单
  ## Code Review检查项
  
  ### 📋 功能性
  - [ ] 功能按需求正确实现
  - [ ] 边界情况处理完善
  - [ ] 错误处理机制完备
  - [ ] 用户体验友好
  
  ### 🏗️ 代码质量
  - [ ] 遵循项目代码规范
  - [ ] 函数职责单一，可读性强
  - [ ] 变量命名清晰有意义
  - [ ] 没有代码重复
  - [ ] 复杂逻辑有注释说明
  
  ### 🎯 架构设计
  - [ ] 业务逻辑与3D代码分离
  - [ ] Redux状态管理正确使用
  - [ ] React Three Fiber Hook封装合理
  - [ ] 组件划分合理，复用性好
  
  ### 🧪 测试质量
  - [ ] 单元测试覆盖率≥85%
  - [ ] 测试用例覆盖主要场景
  - [ ] Mock使用正确
  - [ ] 异步测试处理正确
  
  ### 🔧 技术规范
  - [ ] TypeScript类型定义完整
  - [ ] 使用箭头函数优先
  - [ ] Ant Design组件使用规范
  - [ ] TailwindCSS样式使用正确
  
  ### 📦 性能安全
  - [ ] 没有性能瓶颈
  - [ ] 内存泄漏风险排查
  - [ ] 安全漏洞检查
  - [ ] 依赖版本合理

  // Good - GitHub分支保护规则配置
  {
    "required_status_checks": {
      "strict": true,
      "contexts": [
        "ci/tests",
        "ci/lint", 
        "ci/type-check",
        "ci/coverage"
      ]
    },
    "enforce_admins": true,
    "required_pull_request_reviews": {
      "required_approving_review_count": 2,
      "dismiss_stale_reviews": true,
      "require_code_owner_reviews": true,
      "require_last_push_approval": true
    },
    "restrictions": {
      "users": [],
      "teams": ["core-developers"]
    },
    "allow_force_pushes": false,
    "allow_deletions": false
  }

  // Good - CODEOWNERS文件
  # Global owners
  * @team-lead @senior-dev
  
  # Frontend/UI changes
  /src/components/ @frontend-team
  /src/ui/ @ui-specialist
  
  # 3D/Three.js changes  
  /src/three/ @3d-specialist
  /src/hooks/use*3D* @3d-specialist
  
  # Redux/State management
  /src/store/ @state-management-expert
  /src/slices/ @state-management-expert
  
  # Testing
  **/*.test.ts @testing-specialist
  **/*.test.tsx @testing-specialist
  
  # Configuration
  /.github/ @devops-team
  /config/ @devops-team

  // Good - Git Hooks配置 (pre-push)
  #!/bin/sh
  
  echo "🔍 Running pre-push checks..."
  
  # 运行测试
  echo "📝 Running tests..."
  npm test -- --coverage --watchAll=false
  if [ $? -ne 0 ]; then
    echo "❌ Tests failed. Push aborted."
    exit 1
  fi
  
  # 检查覆盖率
  echo "📊 Checking test coverage..."
  npm run test:coverage-check
  if [ $? -ne 0 ]; then
    echo "❌ Coverage below 85%. Push aborted."
    exit 1
  fi
  
  # 代码格式检查
  echo "🎨 Running linter..."
  npm run lint
  if [ $? -ne 0 ]; then
    echo "❌ Linting failed. Push aborted."
    exit 1
  fi
  
  # TypeScript类型检查
  echo "🔧 Running type check..."
  npm run type-check
  if [ $? -ne 0 ]; then
    echo "❌ Type check failed. Push aborted."
    exit 1
  fi
  
  echo "✅ All checks passed. Pushing..."
</example>

<example type="invalid">
  // Bad - 直接推送到主分支
  git checkout main
  git add .
  git commit -m "fix bug"
  git push origin main  // 违反了Code Review规则

  // Bad - 低质量的PR描述
  ## Pull Request
  Title: "update code"
  Description: "fixed some stuff"
  // 没有详细说明、没有测试信息、没有Review重点

  // Bad - 跳过CI检查
  git commit -m "quick fix [skip ci]"  // 跳过了必要的自动化检查

  // Bad - 自己批准自己的PR
  // 作为PR作者，不应该批准自己的代码变更

  // Bad - 大型PR没有拆分
  // 单个PR包含：
  // - 重构整个用户系统
  // - 添加新的3D功能
  // - 更新测试框架
  // - 修改构建配置
  // 应该拆分为多个小的、可审查的PR

  // Bad - 忽略Review评论
  // Reviewer: "这里的错误处理逻辑有问题"
  // Author: (直接合并，没有回应或修复)

  // Bad - 没有测试的代码提交
  const UserComponent = () => {
    // 复杂的业务逻辑
    const handleSubmit = async (data) => {
      // 没有测试覆盖的代码
    };
    return <div>...</div>;
  };
  // 提交时没有对应的测试文件

  // Bad - 不符合规范的提交
  // 没有遵循：
  // - TypeScript类型安全
  // - Ant Design组件使用
  // - Redux状态管理
  // - 业务与3D代码分离
  const BadComponent = () => {
    const [state, setState] = useState(); // 没有类型
    // 直接在组件中调用API
    useEffect(() => {
      fetch('/api/data').then(res => setState(res));
    }, []);
    
    return <div style={{}}></div>; // 没有使用Ant Design
  };

  // Bad - 紧急修复绕过Review
  git commit -m "HOTFIX: critical bug"
  git push origin main --force  // 强制推送绕过保护规则

  // Bad - Review质量差
  // Reviewer评论：
  // "LGTM" (没有实际检查代码)
  // "看起来不错" (没有具体反馈)
  // 应该提供具体、建设性的反馈
</example>
